
AVRASM ver. 2.1.30  C:\Users\Sam Litz\Documents\Travail\Etudes\BTS SN IR\BTS 1er année\Curry\TP ISI\tp can\TP3\Debug\List\main.asm Wed Apr 10 09:44:14 2019

C:\Users\Sam Litz\Documents\Travail\Etudes\BTS SN IR\BTS 1er année\Curry\TP ISI\tp can\TP3\Debug\List\main.asm(1095): warning: Register r5 already defined by the .DEF directive
C:\Users\Sam Litz\Documents\Travail\Etudes\BTS SN IR\BTS 1er année\Curry\TP ISI\tp can\TP3\Debug\List\main.asm(1096): warning: Register r4 already defined by the .DEF directive
C:\Users\Sam Litz\Documents\Travail\Etudes\BTS SN IR\BTS 1er année\Curry\TP ISI\tp can\TP3\Debug\List\main.asm(1097): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.34 Evaluation
                 ;(C) Copyright 1998-2018 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004e 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
000033 4441
000034 3243
000035 3a20
000036 2e20      	.DB  0x41,0x44,0x43,0x32,0x20,0x3A,0x20,0x2E
000037 5620
000038 2020
000039 2020
00003a 2020      	.DB  0x20,0x56,0x20,0x20,0x20,0x20,0x20,0x20
                 _0x4:
00003b 4441
00003c 3543
00003d 3a20
00003e 2e20      	.DB  0x41,0x44,0x43,0x35,0x20,0x3A,0x20,0x2E
00003f 5620
000040 2020
000041 2020
000042 2020      	.DB  0x20,0x56,0x20,0x20,0x20,0x20,0x20,0x20
                 _0x2000003:
000043 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000044 0010      	.DW  0x10
000045 0260      	.DW  _riot
000046 0066      	.DW  _0x3*2
                 
000047 0010      	.DW  0x10
000048 0271      	.DW  _riot2
000049 0076      	.DW  _0x4*2
                 
00004a 0002      	.DW  0x02
00004b 0282      	.DW  __base_y_G100
00004c 0086      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00004d 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00004e 94f8      	CLI
00004f 27ee      	CLR  R30
000050 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000051 e0f1      	LDI  R31,1
000052 bffb      	OUT  GICR,R31
000053 bfeb      	OUT  GICR,R30
000054 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000055 e08d      	LDI  R24,(14-2)+1
000056 e0a2      	LDI  R26,2
000057 27bb      	CLR  R27
                 __CLEAR_REG:
000058 93ed      	ST   X+,R30
000059 958a      	DEC  R24
00005a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005c e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005d e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00005e 93ed      	ST   X+,R30
00005f 9701      	SBIW R24,1
000060 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000061 e8e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000062 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000063 9185      	LPM  R24,Z+
000064 9195      	LPM  R25,Z+
000065 9700      	SBIW R24,0
000066 f061      	BREQ __GLOBAL_INI_END
000067 91a5      	LPM  R26,Z+
000068 91b5      	LPM  R27,Z+
000069 9005      	LPM  R0,Z+
00006a 9015      	LPM  R1,Z+
00006b 01bf      	MOVW R22,R30
00006c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006d 9005      	LPM  R0,Z+
00006e 920d      	ST   X+,R0
00006f 9701      	SBIW R24,1
000070 f7e1      	BRNE __GLOBAL_INI_LOOP
000071 01fb      	MOVW R30,R22
000072 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000073 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000074 bfed      	OUT  SPL,R30
000075 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000076 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000077 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000078 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000079 940c 0089 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the CodeWizardAVR V3.34
                 ;Automatic Program Generator
                 ;© Copyright 1998-2018 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 10/04/2019
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega32
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8,000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 512
                 ;*******************************************************/
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;char riot[17] = "ADC2 : . V      ";
                 
                 	.DSEG
                 ;char riot2[17] = "ADC5 : . V      ";
                 ;// Voltage Reference: AREF pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (1<<ADLAR))
                 ;
                 ;// Read the 8 most significant bits
                 ;// of the AD conversion result
                 ;unsigned char read_adc(unsigned char adc_input)
                 ; 0000 0024 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0025 ADMUX=adc_input | ADC_VREF_TYPE;
00007b 931a      	ST   -Y,R17
00007c 2f1a      	MOV  R17,R26
                 ;	adc_input -> R17
00007d 2fe1      	MOV  R30,R17
00007e 62e0      	ORI  R30,0x20
00007f b9e7      	OUT  0x7,R30
                 ; 0000 0026 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0027 delay_us(10);
                +
000080 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000081 958a     +DEC R24
000082 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0028 // Start the AD conversion
                 ; 0000 0029 ADCSRA|=(1<<ADSC);
000083 9a36      	SBI  0x6,6
                 ; 0000 002A // Wait for the AD conversion to complete
                 ; 0000 002B while ((ADCSRA & (1<<ADIF))==0);
                 _0x5:
000084 9b34      	SBIS 0x6,4
000085 cffe      	RJMP _0x5
                 ; 0000 002C ADCSRA|=(1<<ADIF);
000086 9a34      	SBI  0x6,4
                 ; 0000 002D return ADCH;
000087 b1e5      	IN   R30,0x5
000088 c0ef      	RJMP _0x2080001
                 ; 0000 002E }
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0031 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0032 // Declare your local variables here
                 ; 0000 0033 unsigned char tension = 0x00;
                 ; 0000 0034 unsigned char tension2 = 0x00;
                 ; 0000 0035 // Input/Output Ports initialization
                 ; 0000 0036 // Port A initialization
                 ; 0000 0037 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0038 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
                 ;	tension -> R17
                 ;	tension2 -> R16
000089 e010      	LDI  R17,0
00008a e000      	LDI  R16,0
00008b e0e0      	LDI  R30,LOW(0)
00008c bbea      	OUT  0x1A,R30
                 ; 0000 0039 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 003A PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
00008d bbeb      	OUT  0x1B,R30
                 ; 0000 003B 
                 ; 0000 003C // Port B initialization
                 ; 0000 003D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 003E DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
00008e bbe7      	OUT  0x17,R30
                 ; 0000 003F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0040 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00008f bbe8      	OUT  0x18,R30
                 ; 0000 0041 
                 ; 0000 0042 // Port C initialization
                 ; 0000 0043 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0044 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000090 bbe4      	OUT  0x14,R30
                 ; 0000 0045 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0046 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000091 bbe5      	OUT  0x15,R30
                 ; 0000 0047 
                 ; 0000 0048 // Port D initialization
                 ; 0000 0049 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 004A DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000092 bbe1      	OUT  0x11,R30
                 ; 0000 004B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 004C PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000093 bbe2      	OUT  0x12,R30
                 ; 0000 004D 
                 ; 0000 004E // Timer/Counter 0 initialization
                 ; 0000 004F // Clock source: System Clock
                 ; 0000 0050 // Clock value: Timer 0 Stopped
                 ; 0000 0051 // Mode: Normal top=0xFF
                 ; 0000 0052 // OC0 output: Disconnected
                 ; 0000 0053 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000094 bfe3      	OUT  0x33,R30
                 ; 0000 0054 TCNT0=0x00;
000095 bfe2      	OUT  0x32,R30
                 ; 0000 0055 OCR0=0x00;
000096 bfec      	OUT  0x3C,R30
                 ; 0000 0056 
                 ; 0000 0057 // Timer/Counter 1 initialization
                 ; 0000 0058 // Clock source: System Clock
                 ; 0000 0059 // Clock value: Timer1 Stopped
                 ; 0000 005A // Mode: Normal top=0xFFFF
                 ; 0000 005B // OC1A output: Disconnected
                 ; 0000 005C // OC1B output: Disconnected
                 ; 0000 005D // Noise Canceler: Off
                 ; 0000 005E // Input Capture on Falling Edge
                 ; 0000 005F // Timer1 Overflow Interrupt: Off
                 ; 0000 0060 // Input Capture Interrupt: Off
                 ; 0000 0061 // Compare A Match Interrupt: Off
                 ; 0000 0062 // Compare B Match Interrupt: Off
                 ; 0000 0063 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000097 bdef      	OUT  0x2F,R30
                 ; 0000 0064 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000098 bdee      	OUT  0x2E,R30
                 ; 0000 0065 TCNT1H=0x00;
000099 bded      	OUT  0x2D,R30
                 ; 0000 0066 TCNT1L=0x00;
00009a bdec      	OUT  0x2C,R30
                 ; 0000 0067 ICR1H=0x00;
00009b bde7      	OUT  0x27,R30
                 ; 0000 0068 ICR1L=0x00;
00009c bde6      	OUT  0x26,R30
                 ; 0000 0069 OCR1AH=0x00;
00009d bdeb      	OUT  0x2B,R30
                 ; 0000 006A OCR1AL=0x00;
00009e bdea      	OUT  0x2A,R30
                 ; 0000 006B OCR1BH=0x00;
00009f bde9      	OUT  0x29,R30
                 ; 0000 006C OCR1BL=0x00;
0000a0 bde8      	OUT  0x28,R30
                 ; 0000 006D 
                 ; 0000 006E // Timer/Counter 2 initialization
                 ; 0000 006F // Clock source: System Clock
                 ; 0000 0070 // Clock value: Timer2 Stopped
                 ; 0000 0071 // Mode: Normal top=0xFF
                 ; 0000 0072 // OC2 output: Disconnected
                 ; 0000 0073 ASSR=0<<AS2;
0000a1 bde2      	OUT  0x22,R30
                 ; 0000 0074 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000a2 bde5      	OUT  0x25,R30
                 ; 0000 0075 TCNT2=0x00;
0000a3 bde4      	OUT  0x24,R30
                 ; 0000 0076 OCR2=0x00;
0000a4 bde3      	OUT  0x23,R30
                 ; 0000 0077 
                 ; 0000 0078 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0079 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000a5 bfe9      	OUT  0x39,R30
                 ; 0000 007A 
                 ; 0000 007B // External Interrupt(s) initialization
                 ; 0000 007C // INT0: Off
                 ; 0000 007D // INT1: Off
                 ; 0000 007E // INT2: Off
                 ; 0000 007F MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000a6 bfe5      	OUT  0x35,R30
                 ; 0000 0080 MCUCSR=(0<<ISC2);
0000a7 bfe4      	OUT  0x34,R30
                 ; 0000 0081 
                 ; 0000 0082 // USART initialization
                 ; 0000 0083 // USART disabled
                 ; 0000 0084 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000a8 b9ea      	OUT  0xA,R30
                 ; 0000 0085 
                 ; 0000 0086 // Analog Comparator initialization
                 ; 0000 0087 // Analog Comparator: Off
                 ; 0000 0088 // The Analog Comparator's positive input is
                 ; 0000 0089 // connected to the AIN0 pin
                 ; 0000 008A // The Analog Comparator's negative input is
                 ; 0000 008B // connected to the AIN1 pin
                 ; 0000 008C ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000a9 e8e0      	LDI  R30,LOW(128)
0000aa b9e8      	OUT  0x8,R30
                 ; 0000 008D 
                 ; 0000 008E // ADC initialization
                 ; 0000 008F // ADC Clock frequency: 1000,000 kHz
                 ; 0000 0090 // ADC Voltage Reference: AREF pin
                 ; 0000 0091 // ADC Auto Trigger Source: Free Running
                 ; 0000 0092 // Only the 8 most significant bits of
                 ; 0000 0093 // the AD conversion result are used
                 ; 0000 0094 ADMUX=ADC_VREF_TYPE;
0000ab e2e0      	LDI  R30,LOW(32)
0000ac b9e7      	OUT  0x7,R30
                 ; 0000 0095 ADCSRA=(1<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
0000ad eae3      	LDI  R30,LOW(163)
0000ae b9e6      	OUT  0x6,R30
                 ; 0000 0096 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000af e0e0      	LDI  R30,LOW(0)
0000b0 bfe0      	OUT  0x30,R30
                 ; 0000 0097 
                 ; 0000 0098 // SPI initialization
                 ; 0000 0099 // SPI disabled
                 ; 0000 009A SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000b1 b9ed      	OUT  0xD,R30
                 ; 0000 009B 
                 ; 0000 009C // TWI initialization
                 ; 0000 009D // TWI disabled
                 ; 0000 009E TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000b2 bfe6      	OUT  0x36,R30
                 ; 0000 009F 
                 ; 0000 00A0 // Alphanumeric LCD initialization
                 ; 0000 00A1 // Connections are specified in the
                 ; 0000 00A2 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00A3 // RS - PORTB Bit 0
                 ; 0000 00A4 // RD - PORTB Bit 1
                 ; 0000 00A5 // EN - PORTB Bit 2
                 ; 0000 00A6 // D4 - PORTB Bit 4
                 ; 0000 00A7 // D5 - PORTB Bit 5
                 ; 0000 00A8 // D6 - PORTB Bit 6
                 ; 0000 00A9 // D7 - PORTB Bit 7
                 ; 0000 00AA // Characters/line: 16
                 ; 0000 00AB lcd_init(16);
0000b3 e1a0      	LDI  R26,LOW(16)
0000b4 d09a      	RCALL _lcd_init
                 ; 0000 00AC 
                 ; 0000 00AD 
                 ; 0000 00AE while (1)
                 _0x8:
                 ; 0000 00AF       {
                 ; 0000 00B0       // Place your code here
                 ; 0000 00B1       lcd_gotoxy(0,0);
0000b5 e0e0      	LDI  R30,LOW(0)
0000b6 93ea      	ST   -Y,R30
0000b7 e0a0      	LDI  R26,LOW(0)
0000b8 d058      	RCALL _lcd_gotoxy
                 ; 0000 00B2       lcd_puts(riot);
0000b9 e6a0      	LDI  R26,LOW(_riot)
0000ba e0b2      	LDI  R27,HIGH(_riot)
0000bb d084      	RCALL _lcd_puts
                 ; 0000 00B3       lcd_gotoxy(0,1);
0000bc e0e0      	LDI  R30,LOW(0)
0000bd 93ea      	ST   -Y,R30
0000be e0a1      	LDI  R26,LOW(1)
0000bf d051      	RCALL _lcd_gotoxy
                 ; 0000 00B4       lcd_puts(riot2);
0000c0 e7a1      	LDI  R26,LOW(_riot2)
0000c1 e0b2      	LDI  R27,HIGH(_riot2)
0000c2 d07d      	RCALL _lcd_puts
                 ; 0000 00B5       // Acquisition de la tension sur la voie 2 : ADC2
                 ; 0000 00B6       tension = read_adc(0x02);
0000c3 e0a2      	LDI  R26,LOW(2)
0000c4 dfb6      	RCALL _read_adc
0000c5 2f1e      	MOV  R17,R30
                 ; 0000 00B7       tension2 = read_adc(0x05);
0000c6 e0a5      	LDI  R26,LOW(5)
0000c7 dfb3      	RCALL _read_adc
0000c8 2f0e      	MOV  R16,R30
                 ; 0000 00B8       // Conversion DCB pour affichage
                 ; 0000 00B9       tension = tension / 5;
0000c9 2fa1      	MOV  R26,R17
0000ca d0af      	RCALL SUBOPT_0x0
0000cb 2f1e      	MOV  R17,R30
                 ; 0000 00BA       tension2 = tension2 / 5;
0000cc 2fa0      	MOV  R26,R16
0000cd d0ac      	RCALL SUBOPT_0x0
0000ce 2f0e      	MOV  R16,R30
                 ; 0000 00BB 
                 ; 0000 00BC       riot[8] = ((tension +(tension/10)*6) & 0x0F) + 0x30;
0000cf d0af      	RCALL SUBOPT_0x1
0000d0 e0a6      	LDI  R26,LOW(6)
0000d1 02ea      	MULS R30,R26
0000d2 01f0      	MOVW R30,R0
0000d3 0fe1      	ADD  R30,R17
0000d4 70ef      	ANDI R30,LOW(0xF)
0000d5 5de0      	SUBI R30,-LOW(48)
                +
0000d6 93e0 0268+STS _riot + ( 8 ) , R30
                 	__PUTB1MN _riot,8
                 ; 0000 00BD       riot[6] = ((tension +(tension/10)*6) & 0xF0)/0x10 + 0x30;
0000d8 2f61      	MOV  R22,R17
0000d9 2777      	CLR  R23
0000da d0a4      	RCALL SUBOPT_0x1
0000db d0a9      	RCALL SUBOPT_0x2
                +
0000dc 93e0 0266+STS _riot + ( 6 ) , R30
                 	__PUTB1MN _riot,6
                 ; 0000 00BE 
                 ; 0000 00BF       riot2[8] = ((tension2 +(tension2/10)*6) & 0x0F) + 0x30;
0000de d0b6      	RCALL SUBOPT_0x3
0000df e0a6      	LDI  R26,LOW(6)
0000e0 02ea      	MULS R30,R26
0000e1 01f0      	MOVW R30,R0
0000e2 0fe0      	ADD  R30,R16
0000e3 70ef      	ANDI R30,LOW(0xF)
0000e4 5de0      	SUBI R30,-LOW(48)
                +
0000e5 93e0 0279+STS _riot2 + ( 8 ) , R30
                 	__PUTB1MN _riot2,8
                 ; 0000 00C0       riot2[6] = ((tension2 +(tension2/10)*6) & 0xF0)/0x10 + 0x30;
0000e7 2f60      	MOV  R22,R16
0000e8 2777      	CLR  R23
0000e9 d0ab      	RCALL SUBOPT_0x3
0000ea d09a      	RCALL SUBOPT_0x2
                +
0000eb 93e0 0277+STS _riot2 + ( 6 ) , R30
                 	__PUTB1MN _riot2,6
                 ; 0000 00C1 
                 ; 0000 00C2       }
0000ed cfc7      	RJMP _0x8
                 ; 0000 00C3 }
                 _0xB:
0000ee cfff      	RJMP _0xB
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000ef 931a      	ST   -Y,R17
0000f0 2f1a      	MOV  R17,R26
0000f1 b3e8      	IN   R30,0x18
0000f2 70ef      	ANDI R30,LOW(0xF)
0000f3 2fae      	MOV  R26,R30
0000f4 2fe1      	MOV  R30,R17
0000f5 7fe0      	ANDI R30,LOW(0xF0)
0000f6 2bea      	OR   R30,R26
0000f7 bbe8      	OUT  0x18,R30
                +
0000f8 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000f9 958a     +DEC R24
0000fa f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000fb 9ac2      	SBI  0x18,2
                +
0000fc e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000fd 958a     +DEC R24
0000fe f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000ff 98c2      	CBI  0x18,2
                +
000100 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000101 958a     +DEC R24
000102 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000103 c074      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000104 93aa      	ST   -Y,R26
000105 81a8      	LD   R26,Y
000106 dfe8      	RCALL __lcd_write_nibble_G100
000107 81e8          ld    r30,y
000108 95e2          swap  r30
000109 83e8          st    y,r30
00010a 81a8      	LD   R26,Y
00010b dfe3      	RCALL __lcd_write_nibble_G100
                +
00010c e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00010d 958a     +DEC R24
00010e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00010f 9621      	ADIW R28,1
000110 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000111 931a      	ST   -Y,R17
000112 930a      	ST   -Y,R16
000113 2f1a      	MOV  R17,R26
000114 810a      	LDD  R16,Y+2
000115 2fe1      	MOV  R30,R17
000116 e0f0      	LDI  R31,0
000117 57ee      	SUBI R30,LOW(-__base_y_G100)
000118 4ffd      	SBCI R31,HIGH(-__base_y_G100)
000119 81e0      	LD   R30,Z
00011a 0fe0      	ADD  R30,R16
00011b 2fae      	MOV  R26,R30
00011c dfe7      	RCALL __lcd_write_data
00011d 2e50      	MOV  R5,R16
00011e 2e41      	MOV  R4,R17
00011f 8119      	LDD  R17,Y+1
000120 8108      	LDD  R16,Y+0
000121 9623      	ADIW R28,3
000122 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000123 e0a2      	LDI  R26,LOW(2)
000124 d076      	RCALL SUBOPT_0x4
000125 e0ac      	LDI  R26,LOW(12)
000126 dfdd      	RCALL __lcd_write_data
000127 e0a1      	LDI  R26,LOW(1)
000128 d072      	RCALL SUBOPT_0x4
000129 e0e0      	LDI  R30,LOW(0)
00012a 2e4e      	MOV  R4,R30
00012b 2e5e      	MOV  R5,R30
00012c 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00012d 931a      	ST   -Y,R17
00012e 2f1a      	MOV  R17,R26
00012f 301a      	CPI  R17,10
000130 f011      	BREQ _0x2000005
000131 1457      	CP   R5,R7
000132 f038      	BRLO _0x2000004
                 _0x2000005:
000133 e0e0      	LDI  R30,LOW(0)
000134 93ea      	ST   -Y,R30
000135 9443      	INC  R4
000136 2da4      	MOV  R26,R4
000137 dfd9      	RCALL _lcd_gotoxy
000138 301a      	CPI  R17,10
000139 f1f1      	BREQ _0x2080001
                 _0x2000004:
00013a 9453      	INC  R5
00013b 9ac0      	SBI  0x18,0
00013c 2fa1      	MOV  R26,R17
00013d dfc6      	RCALL __lcd_write_data
00013e 98c0      	CBI  0x18,0
00013f c038      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000140 d065      	RCALL __SAVELOCR4
000141 019d      	MOVW R18,R26
                 _0x2000008:
000142 01d9      	MOVW R26,R18
                +
000143 5f2f     +SUBI R18 , LOW ( - 1 )
000144 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000145 91ec      	LD   R30,X
000146 2f1e      	MOV  R17,R30
000147 30e0      	CPI  R30,0
000148 f019      	BREQ _0x200000A
000149 2fa1      	MOV  R26,R17
00014a dfe2      	RCALL _lcd_putchar
00014b cff6      	RJMP _0x2000008
                 _0x200000A:
00014c d05e      	RCALL __LOADLOCR4
00014d 9624      	ADIW R28,4
00014e 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00014f 931a      	ST   -Y,R17
000150 2f1a      	MOV  R17,R26
000151 b3e7      	IN   R30,0x17
000152 6fe0      	ORI  R30,LOW(0xF0)
000153 bbe7      	OUT  0x17,R30
000154 9aba      	SBI  0x17,2
000155 9ab8      	SBI  0x17,0
000156 9ab9      	SBI  0x17,1
000157 98c2      	CBI  0x18,2
000158 98c0      	CBI  0x18,0
000159 98c1      	CBI  0x18,1
00015a 2e71      	MOV  R7,R17
00015b 2fe1      	MOV  R30,R17
00015c 58e0      	SUBI R30,-LOW(128)
                +
00015d 93e0 0284+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00015f 2fe1      	MOV  R30,R17
000160 54e0      	SUBI R30,-LOW(192)
                +
000161 93e0 0285+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000163 e1a4      	LDI  R26,LOW(20)
000164 e0b0      	LDI  R27,0
000165 d081      	RCALL _delay_ms
000166 d038      	RCALL SUBOPT_0x5
000167 d037      	RCALL SUBOPT_0x5
000168 d036      	RCALL SUBOPT_0x5
000169 e2a0      	LDI  R26,LOW(32)
00016a df84      	RCALL __lcd_write_nibble_G100
                +
00016b ec88     +LDI R24 , LOW ( 200 )
00016c e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00016d 9701     +SBIW R24 , 1
00016e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00016f e2a8      	LDI  R26,LOW(40)
000170 df93      	RCALL __lcd_write_data
000171 e0a4      	LDI  R26,LOW(4)
000172 df91      	RCALL __lcd_write_data
000173 e8a5      	LDI  R26,LOW(133)
000174 df8f      	RCALL __lcd_write_data
000175 e0a6      	LDI  R26,LOW(6)
000176 df8d      	RCALL __lcd_write_data
000177 dfab      	RCALL _lcd_clear
                 _0x2080001:
000178 9119      	LD   R17,Y+
000179 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _riot:
000260           	.BYTE 0x11
                 _riot2:
000271           	.BYTE 0x11
                 __base_y_G100:
000282           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00017a e0b0      	LDI  R27,0
00017b e0e5      	LDI  R30,LOW(5)
00017c e0f0      	LDI  R31,HIGH(5)
00017d d056      	RCALL __DIVW21
00017e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
00017f 2fa1      	MOV  R26,R17
000180 e0b0      	LDI  R27,0
000181 e0ea      	LDI  R30,LOW(10)
000182 e0f0      	LDI  R31,HIGH(10)
000183 d050      	RCALL __DIVW21
000184 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x2:
000185 e0a6      	LDI  R26,LOW(6)
000186 e0b0      	LDI  R27,HIGH(6)
000187 d034      	RCALL __MULW12
000188 01db      	MOVW R26,R22
000189 0fae      	ADD  R26,R30
00018a 1fbf      	ADC  R27,R31
00018b efe0      	LDI  R30,LOW(240)
00018c e0f0      	LDI  R31,HIGH(240)
00018d 23ea      	AND  R30,R26
00018e 23fb      	AND  R31,R27
00018f 01df      	MOVW R26,R30
000190 e1e0      	LDI  R30,LOW(16)
000191 e0f0      	LDI  R31,HIGH(16)
000192 d041      	RCALL __DIVW21
000193 5de0      	SUBI R30,-LOW(48)
000194 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
000195 2fa0      	MOV  R26,R16
000196 e0b0      	LDI  R27,0
000197 e0ea      	LDI  R30,LOW(10)
000198 e0f0      	LDI  R31,HIGH(10)
000199 d03a      	RCALL __DIVW21
00019a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
00019b df68      	RCALL __lcd_write_data
00019c e0a3      	LDI  R26,LOW(3)
00019d e0b0      	LDI  R27,0
00019e c048      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x5:
00019f e3a0      	LDI  R26,LOW(48)
0001a0 df4e      	RCALL __lcd_write_nibble_G100
                +
0001a1 ec88     +LDI R24 , LOW ( 200 )
0001a2 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001a3 9701     +SBIW R24 , 1
0001a4 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001a5 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR4:
0001a6 933a      	ST   -Y,R19
                 __SAVELOCR3:
0001a7 932a      	ST   -Y,R18
                 __SAVELOCR2:
0001a8 931a      	ST   -Y,R17
0001a9 930a      	ST   -Y,R16
0001aa 9508      	RET
                 
                 __LOADLOCR4:
0001ab 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0001ac 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0001ad 8119      	LDD  R17,Y+1
0001ae 8108      	LD   R16,Y
0001af 9508      	RET
                 
                 __ANEGW1:
0001b0 95f1      	NEG  R31
0001b1 95e1      	NEG  R30
0001b2 40f0      	SBCI R31,0
0001b3 9508      	RET
                 
                 __MULW12U:
0001b4 9ffa      	MUL  R31,R26
0001b5 2df0      	MOV  R31,R0
0001b6 9feb      	MUL  R30,R27
0001b7 0df0      	ADD  R31,R0
0001b8 9fea      	MUL  R30,R26
0001b9 2de0      	MOV  R30,R0
0001ba 0df1      	ADD  R31,R1
0001bb 9508      	RET
                 
                 __MULW12:
0001bc d01c      	RCALL __CHKSIGNW
0001bd dff6      	RCALL __MULW12U
0001be f40e      	BRTC __MULW121
0001bf dff0      	RCALL __ANEGW1
                 __MULW121:
0001c0 9508      	RET
                 
                 __DIVW21U:
0001c1 2400      	CLR  R0
0001c2 2411      	CLR  R1
0001c3 e190      	LDI  R25,16
                 __DIVW21U1:
0001c4 0faa      	LSL  R26
0001c5 1fbb      	ROL  R27
0001c6 1c00      	ROL  R0
0001c7 1c11      	ROL  R1
0001c8 1a0e      	SUB  R0,R30
0001c9 0a1f      	SBC  R1,R31
0001ca f418      	BRCC __DIVW21U2
0001cb 0e0e      	ADD  R0,R30
0001cc 1e1f      	ADC  R1,R31
0001cd c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0001ce 60a1      	SBR  R26,1
                 __DIVW21U3:
0001cf 959a      	DEC  R25
0001d0 f799      	BRNE __DIVW21U1
0001d1 01fd      	MOVW R30,R26
0001d2 01d0      	MOVW R26,R0
0001d3 9508      	RET
                 
                 __DIVW21:
0001d4 d004      	RCALL __CHKSIGNW
0001d5 dfeb      	RCALL __DIVW21U
0001d6 f40e      	BRTC __DIVW211
0001d7 dfd8      	RCALL __ANEGW1
                 __DIVW211:
0001d8 9508      	RET
                 
                 __CHKSIGNW:
0001d9 94e8      	CLT
0001da fff7      	SBRS R31,7
0001db c002      	RJMP __CHKSW1
0001dc dfd3      	RCALL __ANEGW1
0001dd 9468      	SET
                 __CHKSW1:
0001de ffb7      	SBRS R27,7
0001df c006      	RJMP __CHKSW2
0001e0 95b1      	NEG  R27
0001e1 95a1      	NEG  R26
0001e2 40b0      	SBCI R27,0
0001e3 f800      	BLD  R0,0
0001e4 9403      	INC  R0
0001e5 fa00      	BST  R0,0
                 __CHKSW2:
0001e6 9508      	RET
                 
                 _delay_ms:
0001e7 9610      	adiw r26,0
0001e8 f039      	breq __delay_ms1
                 __delay_ms0:
0001e9 95a8      	wdr
                +
0001ea ed80     +LDI R24 , LOW ( 0x7D0 )
0001eb e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0001ec 9701     +SBIW R24 , 1
0001ed f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0001ee 9711      	sbiw r26,1
0001ef f7c9      	brne __delay_ms0
                 __delay_ms1:
0001f0 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  17 r1 :   6 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  14 r17:  33 r18:   5 r19:   3 r20:   0 r21:   0 r22:   5 r23:   2 
r24:  23 r25:   7 r26:  59 r27:  17 r28:   4 r29:   1 r30: 128 r31:  21 
x  :   4 y  :  26 z  :   8 
Registers used: 22 out of 35 (62.9%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   7 
adiw  :   4 and   :   2 andi  :   4 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   5 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  13 brpl  :   0 brsh  :   0 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   0 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   6 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 
cp    :   1 cpc   :   0 cpi   :   3 cpse  :   0 dec   :   7 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   3 inc   :   3 jmp   :  22 ld    :   7 ldd   :   6 ldi   :  75 
lds   :   0 lpm   :   7 lsl   :   1 lsr   :   0 mov   :  33 movw  :  11 
mul   :   3 muls  :   2 mulsu :   0 neg   :   4 nop   :   0 or    :   1 
ori   :   2 out   :  44 pop   :   0 push  :   0 rcall :  50 ret   :  19 
reti  :   0 rjmp  :  12 rol   :   3 ror   :   0 sbc   :   1 sbci  :   4 
sbi   :   7 sbic  :   0 sbis  :   1 sbiw  :   7 sbr   :   1 sbrc  :   0 
sbrs  :   2 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  18 std   :   0 sts   :   6 sub   :   1 subi  :   7 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 53 out of 116 (45.7%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003e2    922     72    994   32768   3.0%
[.dseg] 0x000060 0x000286      0     38     38    2048   1.9%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 3 warnings
