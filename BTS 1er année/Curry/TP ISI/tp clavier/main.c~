/*******************************************************
This program was created by the CodeWizardAVR V3.34 
Automatic Program Generator
© Copyright 1998-2018 Pavel Haiduc, HP InfoTech s.r.l.
http://www.hpinfotech.com

Project : 
Version : 
Date    : 22/03/2019
Author  : 
Company : 
Comments: 


Chip type               : ATmega32
Program type            : Application
AVR Core Clock frequency: 8,000000 MHz
Memory model            : Small
External RAM size       : 0
Data Stack size         : 512
*******************************************************/

#include <mega32.h>
#include <delay.h>

// Alphanumeric LCD functions
#include <alcd.h>

// Declare your global variables here
unsigned char lecture = 0x00;
unsigned char touche;
char ligne1[17] = "code touche : "; // il faudra afficher la valeur sur les positions 14 et 15
char ligne2[17] = "Touche      : "; // il faudra afficher la valeur sur la position 14

// External Interrupt 0 service routine
interrupt [EXT_INT0] void ext_int0_isr(void)
{
// Place your code here
delay_ms(10);
lecture = PINC;
DDRC = 0xF0;
PORTC = lecture;
touche = PINC + lecture;
DDRC = 0x0F;
PORTC = 0x00;
delay_ms(100);
}

void main(void)
{
// Declare your local variables here

// Input/Output Ports initialization
// Port A initialization
// Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out 
DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
// State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0 
PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);

// Port B initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);

// Port C initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=Out 
DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=0 Bit1=0 Bit0=0 
PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);

// Port D initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);

// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: Timer 0 Stopped
// Mode: Normal top=0xFF
// OC0 output: Disconnected
TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
TCNT0=0x00;
OCR0=0x00;

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: Timer1 Stopped
// Mode: Normal top=0xFFFF
// OC1A output: Disconnected
// OC1B output: Disconnected
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
TCNT1H=0x00;
TCNT1L=0x00;
ICR1H=0x00;
ICR1L=0x00;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;

// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: Timer2 Stopped
// Mode: Normal top=0xFF
// OC2 output: Disconnected
ASSR=0<<AS2;
TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
TCNT2=0x00;
OCR2=0x00;

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);

// External Interrupt(s) initialization
// INT0: On
// INT0 Mode: Rising Edge
// INT1: Off
// INT2: Off
GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (1<<ISC00);
MCUCSR=(0<<ISC2);
GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);

// USART initialization
// USART disabled
UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);

// Analog Comparator initialization
// Analog Comparator: Off
// The Analog Comparator's positive input is
// connected to the AIN0 pin
// The Analog Comparator's negative input is
// connected to the AIN1 pin
ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
SFIOR=(0<<ACME);

// ADC initialization
// ADC disabled
ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);

// SPI initialization
// SPI disabled
SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);

// TWI initialization
// TWI disabled
TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);

// Alphanumeric LCD initialization
// Connections are specified in the
// Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
// RS - PORTB Bit 0
// RD - PORTB Bit 1
// EN - PORTB Bit 2
// D4 - PORTB Bit 4
// D5 - PORTB Bit 5
// D6 - PORTB Bit 6
// D7 - PORTB Bit 7
// Characters/line: 16
lcd_init(16);
lcd_gotoxy(0,0);
lcd_puts(ligne1);

lcd_gotoxy(0,1);
lcd_puts(ligne2);
// Globally enable interrupts
#asm("sei")

while (1)
      {
      // Place your code here
      PORTA = touche;
      
      // touche 1
      if(touche == 0xEE)
        {
        lcd_gotoxy(14,0);
        lcd_putchar('E');
        lcd_gotoxy(15,0);
        lcd_putchar('E');
        lcd_gotoxy(14,1);
        lcd_putchar('1');             
        }
      
      // touche 2
      if(touche == 0xDE)
        {
        lcd_gotoxy(14,0);
        lcd_putchar('D');
        lcd_gotoxy(15,0);
        lcd_putchar('E');
        lcd_gotoxy(14,1);
        lcd_putchar('2');             
        }
        
      // touche 3
      if(touche == 0xBE)
        {
        lcd_gotoxy(14,0);
        lcd_putchar('B');
        lcd_gotoxy(15,0);
        lcd_putchar('E');
        lcd_gotoxy(14,1);
        lcd_putchar('3');             
        }
        
      // touche 4
      if(touche == 0xED)
        {
        lcd_gotoxy(14,0);
        lcd_putchar('E');
        lcd_gotoxy(15,0);
        lcd_putchar('D');
        lcd_gotoxy(14,1);
        lcd_putchar('4');             
        }
        
      // touche 5
      if(touche == 0xDD)
        {
        lcd_gotoxy(14,0);
        lcd_putchar('D');
        lcd_gotoxy(15,0);
        lcd_putchar('D');
        lcd_gotoxy(14,1);
        lcd_putchar('5');             
        }
        
      // touche 6
      if(touche == 0xBD)
        {
        lcd_gotoxy(14,0);
        lcd_putchar('B');
        lcd_gotoxy(15,0);
        lcd_putchar('D');
        lcd_gotoxy(14,1);
        lcd_putchar('6');             
        }
        
      // touche 7
      if(touche == 0xEB)
        {
        lcd_gotoxy(14,0);
        lcd_putchar('E');
        lcd_gotoxy(15,0);
        lcd_putchar('B');
        lcd_gotoxy(14,1);
        lcd_putchar('7');             
        }
        
        // touche 8
      if(touche == 0xDB)
        {
        lcd_gotoxy(14,0);
        lcd_putchar('D');
        lcd_gotoxy(15,0);
        lcd_putchar('B');
        lcd_gotoxy(14,1);
        lcd_putchar('8');             
        }
        
      // touche 9
      if(touche == 0xBB)
        {
        lcd_gotoxy(14,0);
        lcd_putchar('B');
        lcd_gotoxy(15,0);
        lcd_putchar('B');
        lcd_gotoxy(14,1);
        lcd_putchar('9');             
        }
      
      // touche 0
      if(touche == 0xE7)
        {
        lcd_gotoxy(14,0);
        lcd_putchar('E');
        lcd_gotoxy(15,0);
        lcd_putchar('7');
        lcd_gotoxy(14,1);
        lcd_putchar('0');             
        }
        
      // touche A
      if(touche == 0xD7)
        {
        lcd_gotoxy(14,0);
        lcd_putchar('D');
        lcd_gotoxy(15,0);
        lcd_putchar('7');
        lcd_gotoxy(14,1);
        lcd_putchar('A');             
        }
        
      // touche B
      if(touche == 0xB7)
        {
        lcd_gotoxy(14,0);
        lcd_putchar('B');
        lcd_gotoxy(15,0);
        lcd_putchar('7');
        lcd_gotoxy(14,1);
        lcd_putchar('B');             
        }
        
      // touche C
      if(touche == 0x7E)
        {
        lcd_gotoxy(14,0);
        lcd_putchar('7');
        lcd_gotoxy(15,0);
        lcd_putchar('E');
        lcd_gotoxy(14,1);
        lcd_putchar('C');             
        }
        
      // touche D
      if(touche == 0x7D)
        {
        lcd_gotoxy(14,0);
        lcd_putchar('7');
        lcd_gotoxy(15,0);
        lcd_putchar('D');
        lcd_gotoxy(14,1);
        lcd_putchar('D');             
        }
        
      // touche E
      if(touche == 0x7B)
        {
        lcd_gotoxy(14,0);
        lcd_putchar('7');
        lcd_gotoxy(15,0);
        lcd_putchar('B');
        lcd_gotoxy(14,1);
        lcd_putchar('E');             
        }
        
      // touche F
      if(touche == 0x77)
        {
        lcd_gotoxy(14,0);
        lcd_putchar('7');
        lcd_gotoxy(15,0);
        lcd_putchar('7');
        lcd_gotoxy(14,1);
        lcd_putchar('F');             
        }
      }
}
