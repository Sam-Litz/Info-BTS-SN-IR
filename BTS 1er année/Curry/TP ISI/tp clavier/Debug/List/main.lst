
AVRASM ver. 2.1.30  C:\Users\Sam Litz\Documents\Travail\Etudes\BTS SN IR\BTS 1er année\Curry\TP ISI\tp clavier\Debug\List\main.asm Fri Mar 22 16:36:49 2019

C:\Users\Sam Litz\Documents\Travail\Etudes\BTS SN IR\BTS 1er année\Curry\TP ISI\tp clavier\Debug\List\main.asm(1095): warning: Register r5 already defined by the .DEF directive
C:\Users\Sam Litz\Documents\Travail\Etudes\BTS SN IR\BTS 1er année\Curry\TP ISI\tp clavier\Debug\List\main.asm(1096): warning: Register r4 already defined by the .DEF directive
C:\Users\Sam Litz\Documents\Travail\Etudes\BTS SN IR\BTS 1er année\Curry\TP ISI\tp clavier\Debug\List\main.asm(1097): warning: Register r7 already defined by the .DEF directive
C:\Users\Sam Litz\Documents\Travail\Etudes\BTS SN IR\BTS 1er année\Curry\TP ISI\tp clavier\Debug\List\main.asm(1098): warning: Register r6 already defined by the .DEF directive
C:\Users\Sam Litz\Documents\Travail\Etudes\BTS SN IR\BTS 1er année\Curry\TP ISI\tp clavier\Debug\List\main.asm(1099): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.34 Evaluation
                 ;(C) Copyright 1998-2018 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _lecture=R5
                 	.DEF _touche=R4
                 	.DEF __lcd_x=R7
                 	.DEF __lcd_y=R6
                 	.DEF __lcd_maxx=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0050 	JMP  __RESET
000002 940c 007d 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
C:\Users\Sam Litz\Documents\Travail\Etudes\BTS SN IR\BTS 1er année\Curry\TP ISI\tp clavier\Debug\List\main.asm(1138): warning: .cseg .db misalignment - padding zero byte
000033 0000      	.DB  0x0
                 
                 _0x3:
000034 6f63
000035 6564
000036 7420
000037 756f      	.DB  0x63,0x6F,0x64,0x65,0x20,0x74,0x6F,0x75
000038 6863
000039 2065
00003a 203a      	.DB  0x63,0x68,0x65,0x20,0x3A,0x20
                 _0x4:
00003b 6f54
00003c 6375
00003d 6568
00003e 2020      	.DB  0x54,0x6F,0x75,0x63,0x68,0x65,0x20,0x20
00003f 2020
000040 2020
000041 203a      	.DB  0x20,0x20,0x20,0x20,0x3A,0x20
                 _0x2000003:
000042 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000043 0001      	.DW  0x01
000044 0005      	.DW  0x05
000045 0066      	.DW  __REG_VARS*2
                 
000046 000e      	.DW  0x0E
000047 0260      	.DW  _ligne1
000048 0068      	.DW  _0x3*2
                 
000049 000e      	.DW  0x0E
00004a 0271      	.DW  _ligne2
00004b 0076      	.DW  _0x4*2
                 
00004c 0002      	.DW  0x02
00004d 0282      	.DW  __base_y_G100
00004e 0084      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00004f 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000050 94f8      	CLI
000051 27ee      	CLR  R30
000052 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000053 e0f1      	LDI  R31,1
000054 bffb      	OUT  GICR,R31
000055 bfeb      	OUT  GICR,R30
000056 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000057 e08d      	LDI  R24,(14-2)+1
000058 e0a2      	LDI  R26,2
000059 27bb      	CLR  R27
                 __CLEAR_REG:
00005a 93ed      	ST   X+,R30
00005b 958a      	DEC  R24
00005c f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005d e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005e e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005f e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000060 93ed      	ST   X+,R30
000061 9701      	SBIW R24,1
000062 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000063 e8e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000064 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000065 9185      	LPM  R24,Z+
000066 9195      	LPM  R25,Z+
000067 9700      	SBIW R24,0
000068 f061      	BREQ __GLOBAL_INI_END
000069 91a5      	LPM  R26,Z+
00006a 91b5      	LPM  R27,Z+
00006b 9005      	LPM  R0,Z+
00006c 9015      	LPM  R1,Z+
00006d 01bf      	MOVW R22,R30
00006e 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006f 9005      	LPM  R0,Z+
000070 920d      	ST   X+,R0
000071 9701      	SBIW R24,1
000072 f7e1      	BRNE __GLOBAL_INI_LOOP
000073 01fb      	MOVW R30,R22
000074 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000075 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000076 bfed      	OUT  SPL,R30
000077 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000078 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000079 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00007a e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00007b 940c 00a6 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the CodeWizardAVR V3.34
                 ;Automatic Program Generator
                 ;© Copyright 1998-2018 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 22/03/2019
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega32
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8,000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 512
                 ;*******************************************************/
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;unsigned char lecture = 0x00;
                 ;unsigned char touche;
                 ;char ligne1[17] = "code touche : "; // il faudra afficher la valeur sur les positions 14 et 15
                 
                 	.DSEG
                 ;char ligne2[17] = "Touche      : "; // il faudra afficher la valeur sur la position 14
                 ;
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0025 {
                 
                 	.CSEG
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
00007d 920a      	ST   -Y,R0
00007e 921a      	ST   -Y,R1
00007f 92fa      	ST   -Y,R15
000080 936a      	ST   -Y,R22
000081 937a      	ST   -Y,R23
000082 938a      	ST   -Y,R24
000083 939a      	ST   -Y,R25
000084 93aa      	ST   -Y,R26
000085 93ba      	ST   -Y,R27
000086 93ea      	ST   -Y,R30
000087 93fa      	ST   -Y,R31
000088 b7ef      	IN   R30,SREG
000089 93ea      	ST   -Y,R30
                 ; 0000 0026 // Place your code here
                 ; 0000 0027 delay_ms(10);
00008a e0aa      	LDI  R26,LOW(10)
00008b e0b0      	LDI  R27,0
00008c d1b4      	RCALL _delay_ms
                 ; 0000 0028 lecture = PINC;
00008d b253      	IN   R5,19
                 ; 0000 0029 DDRC = 0xF0;
00008e efe0      	LDI  R30,LOW(240)
00008f bbe4      	OUT  0x14,R30
                 ; 0000 002A PORTC = lecture;
000090 ba55      	OUT  0x15,R5
                 ; 0000 002B touche = PINC + lecture;
000091 b3e3      	IN   R30,0x13
000092 0de5      	ADD  R30,R5
000093 2e4e      	MOV  R4,R30
                 ; 0000 002C DDRC = 0x0F;
000094 d15e      	RCALL SUBOPT_0x0
                 ; 0000 002D PORTC = 0x00;
                 ; 0000 002E delay_ms(100);
000095 e6a4      	LDI  R26,LOW(100)
000096 e0b0      	LDI  R27,0
000097 d1a9      	RCALL _delay_ms
                 ; 0000 002F }
000098 91e9      	LD   R30,Y+
000099 bfef      	OUT  SREG,R30
00009a 91f9      	LD   R31,Y+
00009b 91e9      	LD   R30,Y+
00009c 91b9      	LD   R27,Y+
00009d 91a9      	LD   R26,Y+
00009e 9199      	LD   R25,Y+
00009f 9189      	LD   R24,Y+
0000a0 9179      	LD   R23,Y+
0000a1 9169      	LD   R22,Y+
0000a2 90f9      	LD   R15,Y+
0000a3 9019      	LD   R1,Y+
0000a4 9009      	LD   R0,Y+
0000a5 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0032 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0033 // Declare your local variables here
                 ; 0000 0034 
                 ; 0000 0035 // Input/Output Ports initialization
                 ; 0000 0036 // Port A initialization
                 ; 0000 0037 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0038 DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
0000a6 efef      	LDI  R30,LOW(255)
0000a7 bbea      	OUT  0x1A,R30
                 ; 0000 0039 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 003A PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000a8 e0e0      	LDI  R30,LOW(0)
0000a9 bbeb      	OUT  0x1B,R30
                 ; 0000 003B 
                 ; 0000 003C // Port B initialization
                 ; 0000 003D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 003E DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000aa bbe7      	OUT  0x17,R30
                 ; 0000 003F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0040 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000ab bbe8      	OUT  0x18,R30
                 ; 0000 0041 
                 ; 0000 0042 // Port C initialization
                 ; 0000 0043 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0044 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
0000ac d146      	RCALL SUBOPT_0x0
                 ; 0000 0045 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0046 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
                 ; 0000 0047 
                 ; 0000 0048 // Port D initialization
                 ; 0000 0049 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 004A DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000ad e0e0      	LDI  R30,LOW(0)
0000ae bbe1      	OUT  0x11,R30
                 ; 0000 004B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 004C PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000af bbe2      	OUT  0x12,R30
                 ; 0000 004D 
                 ; 0000 004E // Timer/Counter 0 initialization
                 ; 0000 004F // Clock source: System Clock
                 ; 0000 0050 // Clock value: Timer 0 Stopped
                 ; 0000 0051 // Mode: Normal top=0xFF
                 ; 0000 0052 // OC0 output: Disconnected
                 ; 0000 0053 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000b0 bfe3      	OUT  0x33,R30
                 ; 0000 0054 TCNT0=0x00;
0000b1 bfe2      	OUT  0x32,R30
                 ; 0000 0055 OCR0=0x00;
0000b2 bfec      	OUT  0x3C,R30
                 ; 0000 0056 
                 ; 0000 0057 // Timer/Counter 1 initialization
                 ; 0000 0058 // Clock source: System Clock
                 ; 0000 0059 // Clock value: Timer1 Stopped
                 ; 0000 005A // Mode: Normal top=0xFFFF
                 ; 0000 005B // OC1A output: Disconnected
                 ; 0000 005C // OC1B output: Disconnected
                 ; 0000 005D // Noise Canceler: Off
                 ; 0000 005E // Input Capture on Falling Edge
                 ; 0000 005F // Timer1 Overflow Interrupt: Off
                 ; 0000 0060 // Input Capture Interrupt: Off
                 ; 0000 0061 // Compare A Match Interrupt: Off
                 ; 0000 0062 // Compare B Match Interrupt: Off
                 ; 0000 0063 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000b3 bdef      	OUT  0x2F,R30
                 ; 0000 0064 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000b4 bdee      	OUT  0x2E,R30
                 ; 0000 0065 TCNT1H=0x00;
0000b5 bded      	OUT  0x2D,R30
                 ; 0000 0066 TCNT1L=0x00;
0000b6 bdec      	OUT  0x2C,R30
                 ; 0000 0067 ICR1H=0x00;
0000b7 bde7      	OUT  0x27,R30
                 ; 0000 0068 ICR1L=0x00;
0000b8 bde6      	OUT  0x26,R30
                 ; 0000 0069 OCR1AH=0x00;
0000b9 bdeb      	OUT  0x2B,R30
                 ; 0000 006A OCR1AL=0x00;
0000ba bdea      	OUT  0x2A,R30
                 ; 0000 006B OCR1BH=0x00;
0000bb bde9      	OUT  0x29,R30
                 ; 0000 006C OCR1BL=0x00;
0000bc bde8      	OUT  0x28,R30
                 ; 0000 006D 
                 ; 0000 006E // Timer/Counter 2 initialization
                 ; 0000 006F // Clock source: System Clock
                 ; 0000 0070 // Clock value: Timer2 Stopped
                 ; 0000 0071 // Mode: Normal top=0xFF
                 ; 0000 0072 // OC2 output: Disconnected
                 ; 0000 0073 ASSR=0<<AS2;
0000bd bde2      	OUT  0x22,R30
                 ; 0000 0074 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000be bde5      	OUT  0x25,R30
                 ; 0000 0075 TCNT2=0x00;
0000bf bde4      	OUT  0x24,R30
                 ; 0000 0076 OCR2=0x00;
0000c0 bde3      	OUT  0x23,R30
                 ; 0000 0077 
                 ; 0000 0078 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0079 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000c1 bfe9      	OUT  0x39,R30
                 ; 0000 007A 
                 ; 0000 007B // External Interrupt(s) initialization
                 ; 0000 007C // INT0: On
                 ; 0000 007D // INT0 Mode: Rising Edge
                 ; 0000 007E // INT1: Off
                 ; 0000 007F // INT2: Off
                 ; 0000 0080 GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
0000c2 b7eb      	IN   R30,0x3B
0000c3 64e0      	ORI  R30,0x40
0000c4 bfeb      	OUT  0x3B,R30
                 ; 0000 0081 MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (1<<ISC00);
0000c5 e0e3      	LDI  R30,LOW(3)
0000c6 bfe5      	OUT  0x35,R30
                 ; 0000 0082 MCUCSR=(0<<ISC2);
0000c7 e0e0      	LDI  R30,LOW(0)
0000c8 bfe4      	OUT  0x34,R30
                 ; 0000 0083 GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
0000c9 e4e0      	LDI  R30,LOW(64)
0000ca bfea      	OUT  0x3A,R30
                 ; 0000 0084 
                 ; 0000 0085 // USART initialization
                 ; 0000 0086 // USART disabled
                 ; 0000 0087 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000cb e0e0      	LDI  R30,LOW(0)
0000cc b9ea      	OUT  0xA,R30
                 ; 0000 0088 
                 ; 0000 0089 // Analog Comparator initialization
                 ; 0000 008A // Analog Comparator: Off
                 ; 0000 008B // The Analog Comparator's positive input is
                 ; 0000 008C // connected to the AIN0 pin
                 ; 0000 008D // The Analog Comparator's negative input is
                 ; 0000 008E // connected to the AIN1 pin
                 ; 0000 008F ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000cd e8e0      	LDI  R30,LOW(128)
0000ce b9e8      	OUT  0x8,R30
                 ; 0000 0090 SFIOR=(0<<ACME);
0000cf e0e0      	LDI  R30,LOW(0)
0000d0 bfe0      	OUT  0x30,R30
                 ; 0000 0091 
                 ; 0000 0092 // ADC initialization
                 ; 0000 0093 // ADC disabled
                 ; 0000 0094 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0000d1 b9e6      	OUT  0x6,R30
                 ; 0000 0095 
                 ; 0000 0096 // SPI initialization
                 ; 0000 0097 // SPI disabled
                 ; 0000 0098 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000d2 b9ed      	OUT  0xD,R30
                 ; 0000 0099 
                 ; 0000 009A // TWI initialization
                 ; 0000 009B // TWI disabled
                 ; 0000 009C TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000d3 bfe6      	OUT  0x36,R30
                 ; 0000 009D 
                 ; 0000 009E // Alphanumeric LCD initialization
                 ; 0000 009F // Connections are specified in the
                 ; 0000 00A0 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00A1 // RS - PORTB Bit 0
                 ; 0000 00A2 // RD - PORTB Bit 1
                 ; 0000 00A3 // EN - PORTB Bit 2
                 ; 0000 00A4 // D4 - PORTB Bit 4
                 ; 0000 00A5 // D5 - PORTB Bit 5
                 ; 0000 00A6 // D6 - PORTB Bit 6
                 ; 0000 00A7 // D7 - PORTB Bit 7
                 ; 0000 00A8 // Characters/line: 16
                 ; 0000 00A9 lcd_init(16);
0000d4 e1a0      	LDI  R26,LOW(16)
0000d5 d0f2      	RCALL _lcd_init
                 ; 0000 00AA lcd_gotoxy(0,0);
0000d6 e0e0      	LDI  R30,LOW(0)
0000d7 93ea      	ST   -Y,R30
0000d8 e0a0      	LDI  R26,LOW(0)
0000d9 d0b0      	RCALL _lcd_gotoxy
                 ; 0000 00AB lcd_puts(ligne1);
0000da e6a0      	LDI  R26,LOW(_ligne1)
0000db e0b2      	LDI  R27,HIGH(_ligne1)
0000dc d0dc      	RCALL _lcd_puts
                 ; 0000 00AC 
                 ; 0000 00AD lcd_gotoxy(0,1);
0000dd e0e0      	LDI  R30,LOW(0)
0000de 93ea      	ST   -Y,R30
0000df e0a1      	LDI  R26,LOW(1)
0000e0 d0a9      	RCALL _lcd_gotoxy
                 ; 0000 00AE lcd_puts(ligne2);
0000e1 e7a1      	LDI  R26,LOW(_ligne2)
0000e2 e0b2      	LDI  R27,HIGH(_ligne2)
0000e3 d0d5      	RCALL _lcd_puts
                 ; 0000 00AF // Globally enable interrupts
                 ; 0000 00B0 #asm("sei")
0000e4 9478      	SEI
                 ; 0000 00B1 
                 ; 0000 00B2 while (1)
                 _0x5:
                 ; 0000 00B3       {
                 ; 0000 00B4       // Place your code here
                 ; 0000 00B5       PORTA = touche;
0000e5 ba4b      	OUT  0x1B,R4
                 ; 0000 00B6 
                 ; 0000 00B7       // touche 1
                 ; 0000 00B8       if(touche == 0xEE)
0000e6 eeee      	LDI  R30,LOW(238)
0000e7 15e4      	CP   R30,R4
0000e8 f429      	BRNE _0x8
                 ; 0000 00B9         {
                 ; 0000 00BA         lcd_gotoxy(14,0);
0000e9 d10e      	RCALL SUBOPT_0x1
                 ; 0000 00BB         lcd_putchar('E');
0000ea d111      	RCALL SUBOPT_0x2
                 ; 0000 00BC         lcd_gotoxy(15,0);
                 ; 0000 00BD         lcd_putchar('E');
0000eb d116      	RCALL SUBOPT_0x3
                 ; 0000 00BE         lcd_gotoxy(14,1);
                 ; 0000 00BF         lcd_putchar('1');
0000ec e3a1      	LDI  R26,LOW(49)
0000ed d0b8      	RCALL _lcd_putchar
                 ; 0000 00C0         }
                 ; 0000 00C1 
                 ; 0000 00C2       // touche 2
                 ; 0000 00C3       if(touche == 0xDE)
                 _0x8:
0000ee edee      	LDI  R30,LOW(222)
0000ef 15e4      	CP   R30,R4
0000f0 f429      	BRNE _0x9
                 ; 0000 00C4         {
                 ; 0000 00C5         lcd_gotoxy(14,0);
0000f1 d106      	RCALL SUBOPT_0x1
                 ; 0000 00C6         lcd_putchar('D');
0000f2 d115      	RCALL SUBOPT_0x4
                 ; 0000 00C7         lcd_gotoxy(15,0);
                 ; 0000 00C8         lcd_putchar('E');
0000f3 d10e      	RCALL SUBOPT_0x3
                 ; 0000 00C9         lcd_gotoxy(14,1);
                 ; 0000 00CA         lcd_putchar('2');
0000f4 e3a2      	LDI  R26,LOW(50)
0000f5 d0b0      	RCALL _lcd_putchar
                 ; 0000 00CB         }
                 ; 0000 00CC 
                 ; 0000 00CD       // touche 3
                 ; 0000 00CE       if(touche == 0xBE)
                 _0x9:
0000f6 ebee      	LDI  R30,LOW(190)
0000f7 15e4      	CP   R30,R4
0000f8 f429      	BRNE _0xA
                 ; 0000 00CF         {
                 ; 0000 00D0         lcd_gotoxy(14,0);
0000f9 d0fe      	RCALL SUBOPT_0x1
                 ; 0000 00D1         lcd_putchar('B');
0000fa d113      	RCALL SUBOPT_0x5
                 ; 0000 00D2         lcd_gotoxy(15,0);
                 ; 0000 00D3         lcd_putchar('E');
0000fb d106      	RCALL SUBOPT_0x3
                 ; 0000 00D4         lcd_gotoxy(14,1);
                 ; 0000 00D5         lcd_putchar('3');
0000fc e3a3      	LDI  R26,LOW(51)
0000fd d0a8      	RCALL _lcd_putchar
                 ; 0000 00D6         }
                 ; 0000 00D7 
                 ; 0000 00D8       // touche 4
                 ; 0000 00D9       if(touche == 0xED)
                 _0xA:
0000fe eeed      	LDI  R30,LOW(237)
0000ff 15e4      	CP   R30,R4
000100 f429      	BRNE _0xB
                 ; 0000 00DA         {
                 ; 0000 00DB         lcd_gotoxy(14,0);
000101 d0f6      	RCALL SUBOPT_0x1
                 ; 0000 00DC         lcd_putchar('E');
000102 d0f9      	RCALL SUBOPT_0x2
                 ; 0000 00DD         lcd_gotoxy(15,0);
                 ; 0000 00DE         lcd_putchar('D');
000103 d110      	RCALL SUBOPT_0x6
                 ; 0000 00DF         lcd_gotoxy(14,1);
                 ; 0000 00E0         lcd_putchar('4');
000104 e3a4      	LDI  R26,LOW(52)
000105 d0a0      	RCALL _lcd_putchar
                 ; 0000 00E1         }
                 ; 0000 00E2 
                 ; 0000 00E3       // touche 5
                 ; 0000 00E4       if(touche == 0xDD)
                 _0xB:
000106 eded      	LDI  R30,LOW(221)
000107 15e4      	CP   R30,R4
000108 f429      	BRNE _0xC
                 ; 0000 00E5         {
                 ; 0000 00E6         lcd_gotoxy(14,0);
000109 d0ee      	RCALL SUBOPT_0x1
                 ; 0000 00E7         lcd_putchar('D');
00010a d0fd      	RCALL SUBOPT_0x4
                 ; 0000 00E8         lcd_gotoxy(15,0);
                 ; 0000 00E9         lcd_putchar('D');
00010b d108      	RCALL SUBOPT_0x6
                 ; 0000 00EA         lcd_gotoxy(14,1);
                 ; 0000 00EB         lcd_putchar('5');
00010c e3a5      	LDI  R26,LOW(53)
00010d d098      	RCALL _lcd_putchar
                 ; 0000 00EC         }
                 ; 0000 00ED 
                 ; 0000 00EE       // touche 6
                 ; 0000 00EF       if(touche == 0xBD)
                 _0xC:
00010e ebed      	LDI  R30,LOW(189)
00010f 15e4      	CP   R30,R4
000110 f429      	BRNE _0xD
                 ; 0000 00F0         {
                 ; 0000 00F1         lcd_gotoxy(14,0);
000111 d0e6      	RCALL SUBOPT_0x1
                 ; 0000 00F2         lcd_putchar('B');
000112 d0fb      	RCALL SUBOPT_0x5
                 ; 0000 00F3         lcd_gotoxy(15,0);
                 ; 0000 00F4         lcd_putchar('D');
000113 d100      	RCALL SUBOPT_0x6
                 ; 0000 00F5         lcd_gotoxy(14,1);
                 ; 0000 00F6         lcd_putchar('6');
000114 e3a6      	LDI  R26,LOW(54)
000115 d090      	RCALL _lcd_putchar
                 ; 0000 00F7         }
                 ; 0000 00F8 
                 ; 0000 00F9       // touche 7
                 ; 0000 00FA       if(touche == 0xEB)
                 _0xD:
000116 eeeb      	LDI  R30,LOW(235)
000117 15e4      	CP   R30,R4
000118 f429      	BRNE _0xE
                 ; 0000 00FB         {
                 ; 0000 00FC         lcd_gotoxy(14,0);
000119 d0de      	RCALL SUBOPT_0x1
                 ; 0000 00FD         lcd_putchar('E');
00011a d0e1      	RCALL SUBOPT_0x2
                 ; 0000 00FE         lcd_gotoxy(15,0);
                 ; 0000 00FF         lcd_putchar('B');
00011b d0fe      	RCALL SUBOPT_0x7
                 ; 0000 0100         lcd_gotoxy(14,1);
                 ; 0000 0101         lcd_putchar('7');
00011c e3a7      	LDI  R26,LOW(55)
00011d d088      	RCALL _lcd_putchar
                 ; 0000 0102         }
                 ; 0000 0103 
                 ; 0000 0104         // touche 8
                 ; 0000 0105       if(touche == 0xDB)
                 _0xE:
00011e edeb      	LDI  R30,LOW(219)
00011f 15e4      	CP   R30,R4
000120 f429      	BRNE _0xF
                 ; 0000 0106         {
                 ; 0000 0107         lcd_gotoxy(14,0);
000121 d0d6      	RCALL SUBOPT_0x1
                 ; 0000 0108         lcd_putchar('D');
000122 d0e5      	RCALL SUBOPT_0x4
                 ; 0000 0109         lcd_gotoxy(15,0);
                 ; 0000 010A         lcd_putchar('B');
000123 d0f6      	RCALL SUBOPT_0x7
                 ; 0000 010B         lcd_gotoxy(14,1);
                 ; 0000 010C         lcd_putchar('8');
000124 e3a8      	LDI  R26,LOW(56)
000125 d080      	RCALL _lcd_putchar
                 ; 0000 010D         }
                 ; 0000 010E 
                 ; 0000 010F       // touche 9
                 ; 0000 0110       if(touche == 0xBB)
                 _0xF:
000126 ebeb      	LDI  R30,LOW(187)
000127 15e4      	CP   R30,R4
000128 f429      	BRNE _0x10
                 ; 0000 0111         {
                 ; 0000 0112         lcd_gotoxy(14,0);
000129 d0ce      	RCALL SUBOPT_0x1
                 ; 0000 0113         lcd_putchar('B');
00012a d0e3      	RCALL SUBOPT_0x5
                 ; 0000 0114         lcd_gotoxy(15,0);
                 ; 0000 0115         lcd_putchar('B');
00012b d0ee      	RCALL SUBOPT_0x7
                 ; 0000 0116         lcd_gotoxy(14,1);
                 ; 0000 0117         lcd_putchar('9');
00012c e3a9      	LDI  R26,LOW(57)
00012d d078      	RCALL _lcd_putchar
                 ; 0000 0118         }
                 ; 0000 0119 
                 ; 0000 011A       // touche 0
                 ; 0000 011B       if(touche == 0xE7)
                 _0x10:
00012e eee7      	LDI  R30,LOW(231)
00012f 15e4      	CP   R30,R4
000130 f429      	BRNE _0x11
                 ; 0000 011C         {
                 ; 0000 011D         lcd_gotoxy(14,0);
000131 d0c6      	RCALL SUBOPT_0x1
                 ; 0000 011E         lcd_putchar('E');
000132 d0c9      	RCALL SUBOPT_0x2
                 ; 0000 011F         lcd_gotoxy(15,0);
                 ; 0000 0120         lcd_putchar('7');
000133 d0ec      	RCALL SUBOPT_0x8
                 ; 0000 0121         lcd_gotoxy(14,1);
                 ; 0000 0122         lcd_putchar('0');
000134 e3a0      	LDI  R26,LOW(48)
000135 d070      	RCALL _lcd_putchar
                 ; 0000 0123         }
                 ; 0000 0124 
                 ; 0000 0125       // touche A
                 ; 0000 0126       if(touche == 0xD7)
                 _0x11:
000136 ede7      	LDI  R30,LOW(215)
000137 15e4      	CP   R30,R4
000138 f429      	BRNE _0x12
                 ; 0000 0127         {
                 ; 0000 0128         lcd_gotoxy(14,0);
000139 d0be      	RCALL SUBOPT_0x1
                 ; 0000 0129         lcd_putchar('D');
00013a d0cd      	RCALL SUBOPT_0x4
                 ; 0000 012A         lcd_gotoxy(15,0);
                 ; 0000 012B         lcd_putchar('7');
00013b d0e4      	RCALL SUBOPT_0x8
                 ; 0000 012C         lcd_gotoxy(14,1);
                 ; 0000 012D         lcd_putchar('A');
00013c e4a1      	LDI  R26,LOW(65)
00013d d068      	RCALL _lcd_putchar
                 ; 0000 012E         }
                 ; 0000 012F 
                 ; 0000 0130       // touche B
                 ; 0000 0131       if(touche == 0xB7)
                 _0x12:
00013e ebe7      	LDI  R30,LOW(183)
00013f 15e4      	CP   R30,R4
000140 f429      	BRNE _0x13
                 ; 0000 0132         {
                 ; 0000 0133         lcd_gotoxy(14,0);
000141 d0b6      	RCALL SUBOPT_0x1
                 ; 0000 0134         lcd_putchar('B');
000142 d0cb      	RCALL SUBOPT_0x5
                 ; 0000 0135         lcd_gotoxy(15,0);
                 ; 0000 0136         lcd_putchar('7');
000143 d0dc      	RCALL SUBOPT_0x8
                 ; 0000 0137         lcd_gotoxy(14,1);
                 ; 0000 0138         lcd_putchar('B');
000144 e4a2      	LDI  R26,LOW(66)
000145 d060      	RCALL _lcd_putchar
                 ; 0000 0139         }
                 ; 0000 013A 
                 ; 0000 013B       // touche C
                 ; 0000 013C       if(touche == 0x7E)
                 _0x13:
000146 e7ee      	LDI  R30,LOW(126)
000147 15e4      	CP   R30,R4
000148 f429      	BRNE _0x14
                 ; 0000 013D         {
                 ; 0000 013E         lcd_gotoxy(14,0);
000149 d0ae      	RCALL SUBOPT_0x1
                 ; 0000 013F         lcd_putchar('7');
00014a d0db      	RCALL SUBOPT_0x9
                 ; 0000 0140         lcd_gotoxy(15,0);
                 ; 0000 0141         lcd_putchar('E');
00014b d0b6      	RCALL SUBOPT_0x3
                 ; 0000 0142         lcd_gotoxy(14,1);
                 ; 0000 0143         lcd_putchar('C');
00014c e4a3      	LDI  R26,LOW(67)
00014d d058      	RCALL _lcd_putchar
                 ; 0000 0144         }
                 ; 0000 0145 
                 ; 0000 0146       // touche D
                 ; 0000 0147       if(touche == 0x7D)
                 _0x14:
00014e e7ed      	LDI  R30,LOW(125)
00014f 15e4      	CP   R30,R4
000150 f429      	BRNE _0x15
                 ; 0000 0148         {
                 ; 0000 0149         lcd_gotoxy(14,0);
000151 d0a6      	RCALL SUBOPT_0x1
                 ; 0000 014A         lcd_putchar('7');
000152 d0d3      	RCALL SUBOPT_0x9
                 ; 0000 014B         lcd_gotoxy(15,0);
                 ; 0000 014C         lcd_putchar('D');
000153 d0c0      	RCALL SUBOPT_0x6
                 ; 0000 014D         lcd_gotoxy(14,1);
                 ; 0000 014E         lcd_putchar('D');
000154 e4a4      	LDI  R26,LOW(68)
000155 d050      	RCALL _lcd_putchar
                 ; 0000 014F         }
                 ; 0000 0150 
                 ; 0000 0151       // touche E
                 ; 0000 0152       if(touche == 0x7B)
                 _0x15:
000156 e7eb      	LDI  R30,LOW(123)
000157 15e4      	CP   R30,R4
000158 f429      	BRNE _0x16
                 ; 0000 0153         {
                 ; 0000 0154         lcd_gotoxy(14,0);
000159 d09e      	RCALL SUBOPT_0x1
                 ; 0000 0155         lcd_putchar('7');
00015a d0cb      	RCALL SUBOPT_0x9
                 ; 0000 0156         lcd_gotoxy(15,0);
                 ; 0000 0157         lcd_putchar('B');
00015b d0be      	RCALL SUBOPT_0x7
                 ; 0000 0158         lcd_gotoxy(14,1);
                 ; 0000 0159         lcd_putchar('E');
00015c e4a5      	LDI  R26,LOW(69)
00015d d048      	RCALL _lcd_putchar
                 ; 0000 015A         }
                 ; 0000 015B 
                 ; 0000 015C       // touche F
                 ; 0000 015D       if(touche == 0x77)
                 _0x16:
00015e e7e7      	LDI  R30,LOW(119)
00015f 15e4      	CP   R30,R4
000160 f429      	BRNE _0x17
                 ; 0000 015E         {
                 ; 0000 015F         lcd_gotoxy(14,0);
000161 d096      	RCALL SUBOPT_0x1
                 ; 0000 0160         lcd_putchar('7');
000162 d0c3      	RCALL SUBOPT_0x9
                 ; 0000 0161         lcd_gotoxy(15,0);
                 ; 0000 0162         lcd_putchar('7');
000163 d0bc      	RCALL SUBOPT_0x8
                 ; 0000 0163         lcd_gotoxy(14,1);
                 ; 0000 0164         lcd_putchar('F');
000164 e4a6      	LDI  R26,LOW(70)
000165 d040      	RCALL _lcd_putchar
                 ; 0000 0165         }
                 ; 0000 0166       }
                 _0x17:
000166 cf7e      	RJMP _0x5
                 ; 0000 0167 }
                 _0x18:
000167 cfff      	RJMP _0x18
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000168 931a      	ST   -Y,R17
000169 2f1a      	MOV  R17,R26
00016a b3e8      	IN   R30,0x18
00016b 70ef      	ANDI R30,LOW(0xF)
00016c 2fae      	MOV  R26,R30
00016d 2fe1      	MOV  R30,R17
00016e 7fe0      	ANDI R30,LOW(0xF0)
00016f 2bea      	OR   R30,R26
000170 bbe8      	OUT  0x18,R30
                +
000171 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000172 958a     +DEC R24
000173 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000174 9ac2      	SBI  0x18,2
                +
000175 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000176 958a     +DEC R24
000177 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000178 98c2      	CBI  0x18,2
                +
000179 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00017a 958a     +DEC R24
00017b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00017c c074      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00017d 93aa      	ST   -Y,R26
00017e 81a8      	LD   R26,Y
00017f dfe8      	RCALL __lcd_write_nibble_G100
000180 81e8          ld    r30,y
000181 95e2          swap  r30
000182 83e8          st    y,r30
000183 81a8      	LD   R26,Y
000184 dfe3      	RCALL __lcd_write_nibble_G100
                +
000185 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000186 958a     +DEC R24
000187 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000188 9621      	ADIW R28,1
000189 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00018a 931a      	ST   -Y,R17
00018b 930a      	ST   -Y,R16
00018c 2f1a      	MOV  R17,R26
00018d 810a      	LDD  R16,Y+2
00018e 2fe1      	MOV  R30,R17
00018f e0f0      	LDI  R31,0
000190 57ee      	SUBI R30,LOW(-__base_y_G100)
000191 4ffd      	SBCI R31,HIGH(-__base_y_G100)
000192 81e0      	LD   R30,Z
000193 0fe0      	ADD  R30,R16
000194 2fae      	MOV  R26,R30
000195 dfe7      	RCALL __lcd_write_data
000196 2e70      	MOV  R7,R16
000197 2e61      	MOV  R6,R17
000198 8119      	LDD  R17,Y+1
000199 8108      	LDD  R16,Y+0
00019a 9623      	ADIW R28,3
00019b 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00019c e0a2      	LDI  R26,LOW(2)
00019d d08e      	RCALL SUBOPT_0xA
00019e e0ac      	LDI  R26,LOW(12)
00019f dfdd      	RCALL __lcd_write_data
0001a0 e0a1      	LDI  R26,LOW(1)
0001a1 d08a      	RCALL SUBOPT_0xA
0001a2 e0e0      	LDI  R30,LOW(0)
0001a3 2e6e      	MOV  R6,R30
0001a4 2e7e      	MOV  R7,R30
0001a5 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001a6 931a      	ST   -Y,R17
0001a7 2f1a      	MOV  R17,R26
0001a8 301a      	CPI  R17,10
0001a9 f011      	BREQ _0x2000005
0001aa 1479      	CP   R7,R9
0001ab f038      	BRLO _0x2000004
                 _0x2000005:
0001ac e0e0      	LDI  R30,LOW(0)
0001ad 93ea      	ST   -Y,R30
0001ae 9463      	INC  R6
0001af 2da6      	MOV  R26,R6
0001b0 dfd9      	RCALL _lcd_gotoxy
0001b1 301a      	CPI  R17,10
0001b2 f1f1      	BREQ _0x2080001
                 _0x2000004:
0001b3 9473      	INC  R7
0001b4 9ac0      	SBI  0x18,0
0001b5 2fa1      	MOV  R26,R17
0001b6 dfc6      	RCALL __lcd_write_data
0001b7 98c0      	CBI  0x18,0
0001b8 c038      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0001b9 d07d      	RCALL __SAVELOCR4
0001ba 019d      	MOVW R18,R26
                 _0x2000008:
0001bb 01d9      	MOVW R26,R18
                +
0001bc 5f2f     +SUBI R18 , LOW ( - 1 )
0001bd 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0001be 91ec      	LD   R30,X
0001bf 2f1e      	MOV  R17,R30
0001c0 30e0      	CPI  R30,0
0001c1 f019      	BREQ _0x200000A
0001c2 2fa1      	MOV  R26,R17
0001c3 dfe2      	RCALL _lcd_putchar
0001c4 cff6      	RJMP _0x2000008
                 _0x200000A:
0001c5 d076      	RCALL __LOADLOCR4
0001c6 9624      	ADIW R28,4
0001c7 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0001c8 931a      	ST   -Y,R17
0001c9 2f1a      	MOV  R17,R26
0001ca b3e7      	IN   R30,0x17
0001cb 6fe0      	ORI  R30,LOW(0xF0)
0001cc bbe7      	OUT  0x17,R30
0001cd 9aba      	SBI  0x17,2
0001ce 9ab8      	SBI  0x17,0
0001cf 9ab9      	SBI  0x17,1
0001d0 98c2      	CBI  0x18,2
0001d1 98c0      	CBI  0x18,0
0001d2 98c1      	CBI  0x18,1
0001d3 2e91      	MOV  R9,R17
0001d4 2fe1      	MOV  R30,R17
0001d5 58e0      	SUBI R30,-LOW(128)
                +
0001d6 93e0 0284+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0001d8 2fe1      	MOV  R30,R17
0001d9 54e0      	SUBI R30,-LOW(192)
                +
0001da 93e0 0285+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0001dc e1a4      	LDI  R26,LOW(20)
0001dd e0b0      	LDI  R27,0
0001de d062      	RCALL _delay_ms
0001df d050      	RCALL SUBOPT_0xB
0001e0 d04f      	RCALL SUBOPT_0xB
0001e1 d04e      	RCALL SUBOPT_0xB
0001e2 e2a0      	LDI  R26,LOW(32)
0001e3 df84      	RCALL __lcd_write_nibble_G100
                +
0001e4 ec88     +LDI R24 , LOW ( 200 )
0001e5 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001e6 9701     +SBIW R24 , 1
0001e7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001e8 e2a8      	LDI  R26,LOW(40)
0001e9 df93      	RCALL __lcd_write_data
0001ea e0a4      	LDI  R26,LOW(4)
0001eb df91      	RCALL __lcd_write_data
0001ec e8a5      	LDI  R26,LOW(133)
0001ed df8f      	RCALL __lcd_write_data
0001ee e0a6      	LDI  R26,LOW(6)
0001ef df8d      	RCALL __lcd_write_data
0001f0 dfab      	RCALL _lcd_clear
                 _0x2080001:
0001f1 9119      	LD   R17,Y+
0001f2 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _ligne1:
000260           	.BYTE 0x11
                 _ligne2:
000271           	.BYTE 0x11
                 __base_y_G100:
000282           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0001f3 e0ef      	LDI  R30,LOW(15)
0001f4 bbe4      	OUT  0x14,R30
0001f5 e0e0      	LDI  R30,LOW(0)
0001f6 bbe5      	OUT  0x15,R30
0001f7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:43 WORDS
                 SUBOPT_0x1:
0001f8 e0ee      	LDI  R30,LOW(14)
0001f9 93ea      	ST   -Y,R30
0001fa e0a0      	LDI  R26,LOW(0)
0001fb cf8e      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2:
0001fc e4a5      	LDI  R26,LOW(69)
0001fd dfa8      	RCALL _lcd_putchar
0001fe e0ef      	LDI  R30,LOW(15)
0001ff 93ea      	ST   -Y,R30
000200 e0a0      	LDI  R26,LOW(0)
000201 cf88      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3:
000202 e4a5      	LDI  R26,LOW(69)
000203 dfa2      	RCALL _lcd_putchar
000204 e0ee      	LDI  R30,LOW(14)
000205 93ea      	ST   -Y,R30
000206 e0a1      	LDI  R26,LOW(1)
000207 cf82      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4:
000208 e4a4      	LDI  R26,LOW(68)
000209 df9c      	RCALL _lcd_putchar
00020a e0ef      	LDI  R30,LOW(15)
00020b 93ea      	ST   -Y,R30
00020c e0a0      	LDI  R26,LOW(0)
00020d cf7c      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x5:
00020e e4a2      	LDI  R26,LOW(66)
00020f df96      	RCALL _lcd_putchar
000210 e0ef      	LDI  R30,LOW(15)
000211 93ea      	ST   -Y,R30
000212 e0a0      	LDI  R26,LOW(0)
000213 cf76      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x6:
000214 e4a4      	LDI  R26,LOW(68)
000215 df90      	RCALL _lcd_putchar
000216 e0ee      	LDI  R30,LOW(14)
000217 93ea      	ST   -Y,R30
000218 e0a1      	LDI  R26,LOW(1)
000219 cf70      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x7:
00021a e4a2      	LDI  R26,LOW(66)
00021b df8a      	RCALL _lcd_putchar
00021c e0ee      	LDI  R30,LOW(14)
00021d 93ea      	ST   -Y,R30
00021e e0a1      	LDI  R26,LOW(1)
00021f cf6a      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x8:
000220 e3a7      	LDI  R26,LOW(55)
000221 df84      	RCALL _lcd_putchar
000222 e0ee      	LDI  R30,LOW(14)
000223 93ea      	ST   -Y,R30
000224 e0a1      	LDI  R26,LOW(1)
000225 cf64      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x9:
000226 e3a7      	LDI  R26,LOW(55)
000227 df7e      	RCALL _lcd_putchar
000228 e0ef      	LDI  R30,LOW(15)
000229 93ea      	ST   -Y,R30
00022a e0a0      	LDI  R26,LOW(0)
00022b cf5e      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
00022c df50      	RCALL __lcd_write_data
00022d e0a3      	LDI  R26,LOW(3)
00022e e0b0      	LDI  R27,0
00022f c011      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0xB:
000230 e3a0      	LDI  R26,LOW(48)
000231 df36      	RCALL __lcd_write_nibble_G100
                +
000232 ec88     +LDI R24 , LOW ( 200 )
000233 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000234 9701     +SBIW R24 , 1
000235 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000236 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR4:
000237 933a      	ST   -Y,R19
                 __SAVELOCR3:
000238 932a      	ST   -Y,R18
                 __SAVELOCR2:
000239 931a      	ST   -Y,R17
00023a 930a      	ST   -Y,R16
00023b 9508      	RET
                 
                 __LOADLOCR4:
00023c 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00023d 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00023e 8119      	LDD  R17,Y+1
00023f 8108      	LD   R16,Y
000240 9508      	RET
                 
                 _delay_ms:
000241 9610      	adiw r26,0
000242 f039      	breq __delay_ms1
                 __delay_ms0:
000243 95a8      	wdr
                +
000244 ed80     +LDI R24 , LOW ( 0x7D0 )
000245 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000246 9701     +SBIW R24 , 1
000247 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000248 9711      	sbiw r26,1
000249 f7c9      	brne __delay_ms0
                 __delay_ms1:
00024a 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :   6 r1 :   3 r2 :   0 r3 :   0 r4 :  18 r5 :   3 r6 :   4 r7 :   4 
r8 :   0 r9 :   2 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   7 r17:  23 r18:   5 r19:   3 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  23 r25:   7 r26:  73 r27:  10 r28:   4 r29:   1 r30: 160 r31:   7 
x  :   4 y  :  58 z  :   8 
Registers used: 25 out of 35 (71.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   2 
adiw  :   4 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   5 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  27 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   2 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :  17 cpc   :   0 cpi   :   3 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   6 inc   :   2 jmp   :  22 ld    :  19 ldd   :   6 ldi   : 121 
lds   :   0 lpm   :   7 lsl   :   0 lsr   :   0 mov   :  20 movw  :   5 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   2 out   :  48 pop   :   0 push  :   0 rcall : 104 ret   :  10 
reti  :   1 rjmp  :  16 rol   :   0 ror   :   0 sbc   :   0 sbci  :   2 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :   7 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  38 std   :   0 sts   :   2 sub   :   0 subi  :   4 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 37 out of 116 (31.9%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000496   1098     76   1174   32768   3.6%
[.dseg] 0x000060 0x000286      0     38     38    2048   1.9%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 6 warnings
